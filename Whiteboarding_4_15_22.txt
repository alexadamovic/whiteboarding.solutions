Question #1: Turning Strings to URLs
URLs cannot have spaces. Instead, all spaces in a string are replaced with %20. Write an algorithm that replaces all spaces in a string with %20.

You may not use the replace() method or regular expressions to solve this problem. Solve the problem with and without recursion.

Example
Input: "Jasmine Ann Jones"

Output: "Jasmine%20Ann%20Jones"

*QUESTIONS*
- Can I assume the input will always be a string?
- Can I use the replace() method and regular expressions to solve this problem?
- Can I split the string into an array?
- Should I use recursion to test for a base case?

function stringToURL(string) {
  let output = ""
  for (let i = 0; i < string.length; i++) {
    if (string.charAt(i) === " ") {
      output += "%20";
    } else {
      output += string.charAt(i);
    }
  }
  return output;
}

stringToURL = function(string) {
  if (typeof string !== "string") {
    return "input is not a string";
  }
  sArray = string.split(" ");
  output = sArray.join("%20");
  return output;
}

// With recursion:

stringToURL = function(string) {
  if (typeof string !== "string") {
    return "input is not a string";
  }
  if (string.includes(" ") === false) {
    return string;
  }
  sArray = string.split(" ");
  output = sArray.join("%20");
  return stringToURL(output);
}

// With replace


Question #2: Array Deduping
Write an algorithm that removes duplicates from an array. Do not use a function like filter() to solve this. Once you have solved the problem, demonstrate how it can be solved with filter(). Solve the problem with and without recursion.

Example
Input: [7, 9, "hi", 12, "hi" 7, 53]

Output: [7, 9, "hi", 12, 53]

*QUESTIONS*
- Will the input always be an array with at least 1 value?

function doubleRemover(array) {
  let removeDoubleSet = new Set(array);
  let output = Array.from(removeDoubleSet)
  return output;
}

// With .filter

function doubleRemover(array) {
  function onlyUnique(value, index, self) {
    return self.indexOf(value) === index;
  }
  let output = array.filter(onlyUnique);
  return output;
}

// With recursion:

function doubleRemover(array) {
  let recursionTest = [...array];
  recursionTest.sort();
  for (let i = 0; i < array.length; i++) {
    if (recursionTest[i] !== recursionTest[i + 1]) {
      return array;
    }
    let removeDoubleSet = new Set(array);
    let output = Array.from(removeDoubleSet)
  }
  return doubleRemover(output);
}



Question #3: Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Example
Input: "aaabccdddda"

Output: "3ab2c4da"

*QUESTIONS
- Can I assume the input with always be a string??

function compString(string) {
  output = "";
  charCounter = 1
  for (let i = 0; i < string.length; i++) {
    if (string[i] === string[i + 1]) {
      charCounter ++;
    } else if (charCounter === 1) {
      output += string[i];
    } else {
      output += charCounter + string[i];
      charCounter = 1;
    }
  }
  return output;
}

Question #4: Checking for Uniqueness
Write an algorithm that determines whether all the elements in a string are unique. You may not convert the string into an array or use array methods to solve this problem. The algorithm should return a boolean.

Example
Input: "hello"

Output: false

Input: "copyright"

Output: true

function unique(string) {
  output = true
  for (let i = 0; i < string.length; i++) {
    for (let j = i + 1; j < string.length; j++) {
      if (string[i] === string[j]) {
        output = false;
      }
    }
  }
  return output;
}



Question #5: Array Sorting
Write an algorithm that sorts an array without using the sort() method. There are many different sorting algorithms - take the time to read about the following:

Quick sort
Merge sort
Heap sort
Insertion sort
Bubble sort
Selection sort
You may implement any of the above algorithms (or your own) to solve the problem - as long as it doesn't use sort().

Example
Input: [9, 2, 7, 12]

Output: [2, 7, 9, 12]

function quickSort(array) {
  function swap(items, leftIndex, rightIndex){
    let temp = items[leftIndex];
    items[leftIndex] = items[rightIndex];
    items[rightIndex] = temp;
}
}

